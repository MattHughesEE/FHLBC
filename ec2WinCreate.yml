---
- name: Provisioning ec2 instance
  hosts: localhost
  connection: local
  vars:
    Instance_name: fhcdbsumt02
    key_name: fhlbckey
    aws_region: us-east-2
    aws_instance_type: t2.micro
    aws_ami: ami-0cd3dfa4e37921605
    #aws_ami: ami-04be6a27b0206807f
    subnet: subnet-ed86bf85
    Business_Serv: BusService
    App_Name: TestApp
    Environment: DEV
    Owner_Name: JSMITH
    Patch_Group: Patch1
    aws_account_id: 935659307200
  tasks:
  - name: Launch ec2 Instance
    ec2:
      key_name: "{{ key_name }}"
      region: "{{ aws_region }}"
      #group: databases
      instance_type: "{{ aws_instance_type }}" 
      image: "{{ aws_ami }}"
      #image: ami-0cd3dfa4e37921605 (AMZN Linux)
      wait: yes
      #wait_timeout: 500
      count: 1
      vpc_subnet_id: "{{ subnet }}"
      assign_public_ip: yes
      instance_tags:
         BusinessService: "{{ Business_Serv }}"
         Application: "{{ App_Name }}"
         Env: "{{ Environment }}"
         Name: "{{ Instance_name }}"
         Owner: "{{ Owner_Name }}"
         Patch Group: "{{ Patch_Group }}"
      volumes:
        - device_name: /dev/xvda
          volume_type: gp2
          volume_size: 10
          delete_on_terminiation: true
    register: result
   
  - debug:
      var=result
      
  - debug:
      var=result.instances[0].block_device_mapping["/dev/xvda"].volume_id
  
 # - set_fact: 
     # volume_id_stored: result.instances[0].block_device_mapping["/dev/xvda"].volume_id
      
  #- set_fact: 
      #volume_id_stored_out={{ volume_id_stored.stdout }}
  #- set_fact:
     # myvalue: "{{ result.stdout | regex_search(regexp,'/(?:vol)/') }}"
      
  #- set_fact: 
    #  volume_id_stored_new=result.instances[0].block_device_mapping["/dev/xvda"].volume_id.stdout
      
  #- debug:
    #  var="{{ volume_id_stored }}"
    
 # - set_fact: 
      #"{{ volume_id_stored }}"=result.instances[0].block_device_mapping["/dev/xvda"].volume_id
    
      
  - name: Add tags to Volume
    ec2_tag:
      region: "{{ aws_region }}"
      resource: "{{ result.instances[0].block_device_mapping['/dev/xvda'].volume_id }}"
      #resource: "{{ volume_id_stored_out }}"
      #resource: result.instances[0].block_device_mapping[\"/dev/xvda"\].volume_id
      #resource: "{{ myvalue }}"
      state: present
      tags:
        Name: "{{ App_Name }}"
        Drive: root
        Env: "{{ Environment }}"
        Name: "{{ Instance_name }}"
  
  - name: create alarm for Status Check Failed Any
    ec2_metric_alarm:
      state: present
      region: us-east-2
      name: "{{ Instance_name }}_NoAutorecover-statuscheck_instance-{{ result.instance_ids }}"
      metric: "StatusCheckFailed"
      namespace: "AWS/EC2"
      statistic: Average
      comparison: ">="
      threshold: 1.0
      period: 60
      evaluation_periods: 8
      #unit: "Percent"
      description: "Status check alarm"
      dimensions: {'InstanceId' : '{{ result.instance_ids }}'}
      alarm_actions: ['arn:aws:sns:us-east-2:935659307200:NotificationTopicEC2']
      
  - name: Create alarm for Status Check Failed System
    ec2_metric_alarm:
      state: present
      region: "{{ aws_region }}"
      metric: "StatusCheckFailed_System"
      namespace: "AWS/EC2"
      statistic: Average
      comparison: ">="
      threshold: 1
      period: 60
      evaluation_periods: 8
      description: "Status Check Alarm - System"
      diemnsions: {'InstanceId' : '{{ result.instance_ids }}'}
      alarm_actions: ['arn:aws:sns:us-east-2:935659307200:NotificationTopicEC2', 'arn:aws:automate:{{ aws_region }}:ec2_reecover']
      
      
